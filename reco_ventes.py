import streamlit as st
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer

# ğŸ”¹ CrÃ©ation du dataset avec produits, descriptions et catÃ©gories
data = pd.DataFrame({
    'Produit': ['Chaussures Sport', 'Baskets Running', 'Sac de Sport', 'Montre Fitness', 'Bouteille dâ€™eau', 'Casque Audio'],
    'Description': [
        'Chaussures confortables pour le sport et la marche',
        'Baskets lÃ©gÃ¨res adaptÃ©es au running et au sport',
        'Sac pratique pour transporter ses affaires de sport',
        'Montre connectÃ©e pour le suivi dâ€™activitÃ© sportive',
        'Bouteille isotherme idÃ©ale pour le sport et la randonnÃ©e',
        'Casque sans fil avec rÃ©duction de bruit pour la musique'
    ],
    'CatÃ©gorie': ['Sport', 'Sport', 'Sport', 'Tech', 'Sport', 'Tech'],  # Ajout des catÃ©gories
    'Image': [
        'https://via.placeholder.com/150',
        'https://via.placeholder.com/150',
        'https://via.placeholder.com/150',
        'https://via.placeholder.com/150',
        'https://via.placeholder.com/150',
        'https://via.placeholder.com/150'
    ]
})

# ğŸ”¹ Transformer les descriptions en vecteurs numÃ©riques (TF-IDF)
vectorizer = TfidfVectorizer(stop_words='french')  # Suppression des mots inutiles
tfidf_matrix = vectorizer.fit_transform(data['Description'])

# ğŸ”¹ Calculer la similaritÃ© cosinus entre les produits
similarity_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)

# ğŸ”¹ Fonction de recommandation avec filtre par catÃ©gorie
def recommander_produits(nom_produit, data, similarity_matrix, top_n=3):
    idx = data[data['Produit'] == nom_produit].index[0]
    scores = list(enumerate(similarity_matrix[idx]))
    scores = sorted(scores, key=lambda x: x[1], reverse=True)[1:]  # Exclure le produit lui-mÃªme
    
    # Filtrer pour garder uniquement les produits de la mÃªme catÃ©gorie
    categorie = data.loc[idx, "CatÃ©gorie"]
    recommandations = [data.iloc[i[0]] for i in scores if data.iloc[i[0]]["CatÃ©gorie"] == categorie][:top_n]
    
    return recommandations

# ğŸ”¹ Interface utilisateur avec Streamlit
st.title("ğŸ›’ Recommandation de Produits")
st.write("""
ğŸ’¡ **Comment Ã§a marche ?**  
SÃ©lectionnez un produit, et nous vous recommanderons dâ€™autres articles similaires **dans la mÃªme catÃ©gorie**.
""")

# ğŸ”¹ SÃ©lecteur de produit
produit_selectionne = st.selectbox("Choisissez un produit :", data['Produit'])

# ğŸ”¹ Afficher les recommandations
if produit_selectionne:
    recommandations = recommander_produits(produit_selectionne, data, similarity_matrix)
    
    st.success(f"ğŸ“¢ Si vous aimez **{produit_selectionne}**, vous pourriez aussi aimer :")

    # ğŸ”¹ Affichage des recommandations en colonnes
    col1, col2, col3 = st.columns(3)
    cols = [col1, col2, col3]

    for i, rec in enumerate(recommandations):
        with cols[i]:  # Affichage en colonnes
            st.image(rec['Image'], width=120)
            st.write(f"**{rec['Produit']}**")
