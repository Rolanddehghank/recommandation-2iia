import streamlit as st
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer

# üîπ Cr√©ation du dataset avec des images r√©elles
data = pd.DataFrame({
    'Produit': [
        'Chaussures de Sport', 'Baskets Running', 'Sac de Sport', 'Montre Fitness', 'Bouteille Isotherme',
        'Casque Audio', 'PC Portable', 'Clavier M√©canique', '√âcran 27 pouces', 'Smartphone 5G',
        'Aspirateur Robot', 'Table Basse', 'Lampe LED', 'Jeu Vid√©o', '√âcouteurs Sans Fil'
    ],
    'Description': [
        'Chaussures l√©g√®res et confortables pour la course',
        'Baskets running ultra l√©g√®res pour performances optimales',
        'Sac de sport imperm√©able avec compartiments multiples',
        'Montre connect√©e avec suivi d‚Äôactivit√© et GPS',
        'Bouteille isotherme pour boissons chaudes et froides',
        'Casque Bluetooth avec r√©duction de bruit active',
        'Ordinateur portable performant pour gaming et travail',
        'Clavier m√©canique r√©tro√©clair√© avec switches rapides',
        '√âcran Full HD 27 pouces pour une exp√©rience visuelle immersive',
        'Smartphone derni√®re g√©n√©ration avec appareil photo avanc√©',
        'Aspirateur robot autonome avec programmation intelligente',
        'Table basse en bois massif avec espace de rangement',
        'Lampe LED avec intensit√© r√©glable et mode veilleuse',
        'Jeu vid√©o immersif avec graphismes haute r√©solution',
        '√âcouteurs sans fil avec autonomie prolong√©e'
    ],
    'Cat√©gorie': [
        'Sport', 'Sport', 'Sport', 'Sport', 'Sport',
        'Tech', 'Tech', 'Tech', 'Tech', 'Tech',
        'Maison', 'Maison', 'Maison', 'Divertissement', 'Tech'
    ],
    'Image': [
        'https://example.com/images/chaussures_sport.jpg',
        'https://example.com/images/baskets_running.jpg',
        'https://example.com/images/sac_sport.jpg',
        'https://example.com/images/montre_fitness.jpg',
        'https://example.com/images/bouteille_isotherme.jpg',
        'https://example.com/images/casque_audio.jpg',
        'https://example.com/images/pc_portable.jpg',
        'https://example.com/images/clavier_mecanique.jpg',
        'https://example.com/images/ecran_27p.jpg',
        'https://example.com/images/smartphone_5g.jpg',
        'https://example.com/images/aspirateur_robot.jpg',
        'https://example.com/images/table_basse.jpg',
        'https://example.com/images/lampe_led.jpg',
        'https://example.com/images/jeu_video.jpg',
        'https://example.com/images/ecouteurs_sansfil.jpg'
    ]
})

# üîπ Transformer les descriptions en vecteurs num√©riques
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(data['Description'])

# üîπ Calculer la similarit√© cosinus entre les produits
similarity_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)

# üîπ Fonction de recommandation am√©lior√©e
def recommander_produits(nom_produit, data, similarity_matrix, top_n=3):
    idx = data[data['Produit'] == nom_produit].index[0]
    scores = list(enumerate(similarity_matrix[idx]))
    scores = sorted(scores, key=lambda x: x[1], reverse=True)[1:]  # Exclure le produit lui-m√™me

    # üî• Filtrer pour recommander uniquement dans la m√™me cat√©gorie
    categorie = data.loc[idx, "Cat√©gorie"]
    recommandations = [data.iloc[i[0]] for i in scores if data.iloc[i[0]]["Cat√©gorie"] == categorie][:top_n]
    
    return recommandations

# üîπ Interface utilisateur avec Streamlit
st.title("üõí Recommandation de Produits par Cat√©gorie")
st.write("""
üí° **Comment √ßa marche ?**  
S√©lectionnez un produit, et nous vous recommanderons uniquement des articles de la m√™me cat√©gorie.
""")

# üîπ S√©lecteur de produit
produit_selectionne = st.selectbox("Choisissez un produit :", data['Produit'])

# üîπ Afficher les recommandations
if produit_selectionne:
    recommandations = recommander_produits(produit_selectionne, data, similarity_matrix)
    
    if not recommandations:
        st.warning("‚ùå Aucun produit similaire trouv√©.")
    else:
        st.success(f"Si vous aimez **{produit_selectionne}**, vous pourriez aussi aimer :")

        # üîπ Affichage des recommandations en colonnes avec images
        col1, col2, col3 = st.columns(3)
        cols = [col1, col2, col3]

        for i, rec in enumerate(recommandations):
            with cols[i]:  # Affichage en colonnes
                st.image(rec['Image'], width=120)
                st.write(f"**{rec['Produit']}**")
